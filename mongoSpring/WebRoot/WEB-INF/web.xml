<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <context-param>
    <description>spring config</description>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!-- log4j配置。如果不需要下面的配置，可以将log4j文件放到src目录下，log4j会默认加载 -->
	<context-param>  
        <param-name>log4jConfigLocation</param-name>  
        <param-value>classpath:log4j.properties</param-value>  
    </context-param>  
      
    <context-param>  
        <param-name>log4jRefreshInterval</param-name>  
        <param-value>60000</param-value>  
    </context-param>  
    <listener>  
        <listener-class>  
            org.springframework.web.util.Log4jConfigListener  
        </listener-class>  
    </listener> 
  <listener>
    <description>spring listerner</description>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class><!-- 启动Web容器时，自动装配ApplicationContext的配置信息 -->
  </listener>
  <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
  <servlet>
    <servlet-name>spring</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- 主要用作职责调度工作，本身主要用于控制流程 -->
    <!-- 
    1、文件上传解析，如果有请求类型是multipart/form-data将通过MultipartResolver进行文件上传解析。
    2、通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，他包括一个处理器，多个HandkerInterceptor拦截器）。
    3、通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；
    4、通过ViewResolver解析逻辑视图名到具体的视图实现。
    5、本地化解析；
    6、渲染具体的视图；
    7、如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。
     -->
    <init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:springMVC-servlet.xml</param-value>
	</init-param>
	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>*.action</url-pattern>
  </servlet-mapping>
  <filter>
    <filter-name>Spring character encoding filter</filter-name><!-- 编码拦截器 -->
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter>
  	<filter-name>XssSqlFilter</filter-name><!-- xss攻击拦截器 -->
  	<filter-class>com.lxh.module.utils.XSSSecurityFilter</filter-class>
  	<init-param>
  		<param-name>securityconfig</param-name>
  		<param-value>/WEB-INF/classes/xss_security_config.xml</param-value>
  	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>XssSqlFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  	<dispatcher>REQUEST</dispatcher> 
  </filter-mapping>
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class><!-- 处理由JavaBeans Introspector的使用而引起的缓冲泄露 -->
  </listener>
  <session-config>
    	<session-timeout>30</session-timeout>
    </session-config>
	<welcome-file-list>
		<welcome-file>/WEB-INF/jsp/signin.jsp</welcome-file>
	</welcome-file-list>
	<error-page>
		<error-code>404</error-code>
        <location>/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
        <location>/500.jsp</location>
	</error-page>
</web-app>